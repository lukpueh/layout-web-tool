/*****************************************************************
<File Name>
  main.scss

<Author>
  Lukas Puehringer <lukas.puehringer@nyu.edu>

<Started>
  April 21, 2017

<Copyright>
  See LICENSE for licensing information.

<Purpose>
  Central file for layout and styles written using the CSS pre-processor
  language SASS/SCSS.

  Use the following command to compile css file (plus source maps):
  ```
  sass static/scss/main.scss:static/css/main.scss.css
  ```

  We make heavy use of bootstrap-4 for grid layout and basic look and feel.
  https://v4-alpha.getbootstrap.com


  TODO/FIXME:
  - Re-structure, clean up, add comments
  - Remove Bootstrap classes from HTML elements and extend/include them here
    instead

*****************************************************************/

$font-size-h1: 1.75rem !default;
$font-size-h2: 1.25rem !default;
$font-size-h3: 1rem !default;
$font-size-base: 0.85rem !default;

$wizard-blue: #67798d;
$blue: $wizard-blue;
$enable-shadows: true;
$enable-rounded: true;

// Core variables and mixins
@import '../../node_modules/bootstrap/scss/variables';
@import '../../node_modules/bootstrap/scss/mixins';
@import '../../node_modules/bootstrap/scss/custom';

// Reset and dependencies
@import '../../node_modules/bootstrap/scss/normalize';
@import '../../node_modules/bootstrap/scss/print';

// Core CSS
@import '../../node_modules/bootstrap/scss/reboot';
@import '../../node_modules/bootstrap/scss/type';
@import '../../node_modules/bootstrap/scss/images';
@import '../../node_modules/bootstrap/scss/code';
@import '../../node_modules/bootstrap/scss/grid';
@import '../../node_modules/bootstrap/scss/tables';
@import '../../node_modules/bootstrap/scss/forms';
@import '../../node_modules/bootstrap/scss/buttons';

// Components
@import '../../node_modules/bootstrap/scss/transitions';
@import '../../node_modules/bootstrap/scss/dropdown';
@import '../../node_modules/bootstrap/scss/button-group';
@import '../../node_modules/bootstrap/scss/input-group';
@import '../../node_modules/bootstrap/scss/custom-forms';
@import '../../node_modules/bootstrap/scss/nav';
@import '../../node_modules/bootstrap/scss/navbar';
@import '../../node_modules/bootstrap/scss/card';
@import '../../node_modules/bootstrap/scss/breadcrumb';
@import '../../node_modules/bootstrap/scss/pagination';
@import '../../node_modules/bootstrap/scss/badge';
@import '../../node_modules/bootstrap/scss/jumbotron';
@import '../../node_modules/bootstrap/scss/alert';
@import '../../node_modules/bootstrap/scss/progress';
@import '../../node_modules/bootstrap/scss/media';
@import '../../node_modules/bootstrap/scss/list-group';
@import '../../node_modules/bootstrap/scss/responsive-embed';
@import '../../node_modules/bootstrap/scss/close';

// Components w/ JavaScript
@import '../../node_modules/bootstrap/scss/modal';
@import '../../node_modules/bootstrap/scss/tooltip';
@import '../../node_modules/bootstrap/scss/popover';
@import '../../node_modules/bootstrap/scss/carousel';

// Utility classes
@import '../../node_modules/bootstrap/scss/utilities';

@import '../../node_modules/select2/src/scss/core.scss';

// NOTE: From the sass docs:
// "... not possible to dynamically import a Sass file based on a variable"
// NOTE: If we compile scss with gulp we could define include paths

body {
  height:100vh;
  background-color: #f5f5f5;
}

.head {
  background: $wizard-blue;
  color: #f5f5f5;
  height: 100px;
  .container,
  .container .row {
    height: inherit;
  }
  .head-text {
    font-size: 3em;
    font-weight: bold;
  }
  .head-beta {
    color: $orange;
    font-size: 2em;
    font-weight: 100;
    margin-left: 0.5em;
  }
  .head-sub {
    margin-top: -1em;
  }
  a {
    color: inherit;
  }
}

.d-none {
  display: none;
}

.container.content {
  background-color: white;
  border: 1px solid #e3e3e3;
  margin-top: 20px;
  margin-bottom: 20px;
  padding: 40px 20px;
}

#alert-container {
  margin-top: 3em;
  .alert {
    @extend .inset;
    .alert-msg {
      font-size: 1.5em;
      min-height: 1.5em;
    }
  }
}

.inset {
  background-color: #f5f5f5;
  border: 1px solid #e3e3e3;
  @include box-shadow(inset 0 1px 1px rgba(0, 0, 0, 0.05));
}

/*
 * Unordered list with custom "check" bullet points
 * SVG with courtesy of https://octicons.github.com/
 */

ul.check {
  display: inline-block;
  list-style: none;
  font-size: 1.5em;
  padding-right: 1em;
  li:before{
    content: "";
    float: left;
    width: 1em;
    height: 1em;
    margin-right: 1em;
    background-image: url("data:image/svg+xml;utf8,<svg xmlns='http://www.w3.org/2000/svg' width='12' height='16' viewBox='0 0 12 16'><path fill-rule='evenodd' fill='#{$brand-success}' d='M12 5l-8 8-4-4 1.5-1.5L4 10l6.5-6.5z'/></svg>");
    background-position: center;
    background-repeat: no-repeat;
    background-size: 100%;
  }
}

.functionary-name {
  font-size: 1.3em;
}

.dz-container {
  @extend .inset;

  .dropzone {
    @include border-radius(20px);
    border: 0.2em dashed #e3e3e3;
    text-align: center;
    min-height: 2em;
    width: 100%;
    &:hover {
      background-color: #e4e4e4;
      border-color: white;
    }
  }

  .dz-preview {
    position: relative;
    text-align: center;
    margin: 10px;
    padding: 10px;
    background-color: #e4e4e4;
    border: 1px solid #aaa;
    @include border-radius(4px);

/*     &:before {
      content: "x";
      padding: 0 15px;
      color: #999;
      cursor: pointer;
      font-weight: bold;
      left: 0;
    }
 */
    // .dz-image:before {
    //   content: "ðŸ”‘";
    // }
  }
  .dz-size,
  .dz-success-mark,
  .dz-error-mark,
  .dz-message,
  .dz-error,
  .dz-image {
    display: none;
  }
}


// Using solarized light colors for snippet styling
// http://ethanschoonover.com/solarized
.code {
  padding: 15px 20px;
  margin: 0;
  background-color: #FDF6E3;
  color: #586E75;
  border: 1px solid #93A1A1;
}
 textarea.code {
  font-family: $font-family-monospace;
  font-size: $code-font-size;
  overflow-y: hidden;
  resize: none;
  width: 100%;
}

// Form on software supply chain page
.ssc-items {
  .ssc-item {
    @extend .inset;
    padding: 10px 10px;
    .drag-handle {
      font-size: 2em;
    }
  }
}

.opt-form {
  @extend .inset;
  padding: 1.5em 5em 0.5em;
  position: relative;

  // Special styles for custom opt-forms (not in the option grid)
  #opt-form-container & {
    margin-bottom: 20px;
    border-color: darkgrey;
    background-color: white;
    &:before {
      content: "|||";
      position: absolute;
      font-size: 2em;
      top: 0.2em;
      left: 0.5em;
    }
  }
}

.template {
  display: none;
}

// Extend select for input groups
// http://getbootstrap.com/components/#input-groups
// TODO: replace selects with something that works more cross-browser
.input-group-select {
  &:not(:first-child) {
    @include border-left-radius(0);
  }
  &:not(:last-child) {
    @extend .border-right-0;
    @include border-right-radius(0);
  }
}

// Responsive SVG trick (http://thenewcode.com/744/Make-SVG-Responsive)
.svg-container {
  @extend .inset;

  display: inline-block;
  position: relative;
  width: 100%;
  vertical-align: middle;
  overflow: hidden;
  height: 300px;

  .svg-content {
    display: inline-block;
    position: absolute;
    top: 0;
    left: 0;
    font-size: 0.8em;

    rect, circle {
      fill: transparent;
      stroke: darkgrey;
    }

    .edgePath path {
      stroke: black;
      stroke-width: 1px;
    }
  }
}


/********************
 Option Grid
 ********************/

@mixin make-opt-cells($cells-per-breakpoint) {
  // Media Query Grid Magic:
  // All option cells are inside one Bootstrap `.row` div. Nevertheless, the
  // amount of cells actually displayed on a row depends on the screen width
  // and above definitions `cells-per-breakpoint` for each breakpoint.
  //
  // Depending on the cell per row count we
  // - define col-width of the cell,
  // - define width and offset of the form child of a cell,
  // - and identify the cells where we want to disable the left border to prevent
  //   double borders. (Note: We can't use the standard -1px margin trick here,
  //   as this would mess up the form's width and offset)

  // Iterate over breakpoints...
  @each $bp, $cnt in $cells-per-breakpoint {
    // ... use Bootstrap's media query mixin for different screen widths ...
    @include media-breakpoint-only($bp) {

      // ... customize columns width for cells ...
      @include make-col($grid-columns / $cnt);

      // ... define form width depending on cell count ...
      .opt-form-cont {
        width: $cnt * 100%;
        position: relative;
        z-index: 1;
      }

      // ... define form offset depending on cell count and
      // position ...
      @for $i from 1 through $cnt {
        &:nth-child(#{$cnt}n-#{$cnt - $i}) .opt-form-cont  {
          margin-left: ($i - 1) * -100%;
        }
      }

      // ... and disable left border for not-first childs in
      // a row to prevent double border.
      &:not(:nth-child(#{$cnt}n-#{$cnt - 1})) .opt-content {
        border-left: 0;
      }
    }
  }
}

.opt-row {
  .opt-cell {
    // Hack to prevent double horizontal borders
    margin-bottom: -1px;

      input[type="checkbox"] {
        display: none;
      }
    // The cell content showing logo, command and options
    // The form is a sibling of this element
    .opt-content {
      position: relative;
      border: 1px solid lightgrey;
      height: 60px;



      .opt-logo {
        height: 40px;
        img {
          max-height: 100%;
          max-width: 100%;
        }
      }
      .opt-text {
        height: 20px;
        font-size: 0.8em;
        display: flex;
        justify-content: center;
        flex-direction: column;
        &:only-child {
          height:100%;
        }
      }
    }

    // Change background on hover or expanded form
    &:hover {
      background-color: #f5f5f5;
    }
    &.checked {
      background-color: $green;

    }


    // Breakpoints for cells for different screen widths
    // Note: We must define all available breakpoints in order
    // to use below mixin `media-breakpoint-only`
    @include make-opt-cells(('xs': 6, 'sm': 6, 'md': 8, 'lg': 12, 'xl': 12));

    // For the top cell(s), currently only "add a custom command", we
    // define differnt cells per breakpoint
    // This might seem like an overkill
    &.opt-cell-top {
      @include make-opt-cells(('xs': 1, 'sm': 1, 'md': 1, 'lg': 1, 'xl': 1));
      margin-bottom: 2px;
      .opt-content {
        height: 30px;
        .opt-text {
          font-weight: bold;
          font-size: 0.9em;
        }
      }
    }
  }
}
